// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WC5Oef2.Data;

namespace WC5Oef2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220616081904_Thumbnail")]
    partial class Thumbnail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WC5Oef2.Models.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Lives")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<byte>("Speed")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TrainerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Pokemons","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Lives = (byte)21,
                            Name = "Pikachu",
                            Speed = (byte)19,
                            Thumbnail = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 96, 0, 0, 0, 96, 4, 3, 0, 0, 0, 16, 182, 106, 11, 0, 0, 0, 48, 80, 76, 84, 69, 0, 0, 0, 16, 16, 16, 24, 74, 74, 49, 115, 115, 57, 148, 148, 82, 98, 41, 98, 213, 180, 115, 172, 49, 131, 238, 197, 164, 213, 65, 172, 0, 49, 189, 255, 115, 205, 205, 205, 238, 32, 57, 255, 106, 98, 255, 255, 255, 59, 16, 12, 198, 0, 0, 0, 1, 116, 82, 78, 83, 0, 64, 230, 216, 102, 0, 0, 1, 157, 73, 68, 65, 84, 88, 195, 237, 148, 191, 75, 195, 64, 20, 199, 211, 84, 113, 237, 73, 192, 193, 165, 45, 71, 219, 173, 208, 6, 113, 80, 36, 151, 71, 200, 230, 36, 165, 163, 24, 142, 174, 14, 33, 136, 155, 150, 112, 255, 128, 148, 252, 11, 1, 41, 184, 149, 108, 193, 209, 209, 189, 255, 65, 192, 186, 118, 240, 165, 184, 223, 171, 163, 220, 103, 254, 126, 242, 126, 112, 121, 150, 101, 48, 24, 12, 134, 255, 197, 225, 190, 249, 41, 163, 135, 143, 146, 248, 102, 154, 76, 90, 228, 252, 99, 81, 172, 178, 7, 186, 128, 249, 162, 72, 178, 152, 32, 216, 237, 186, 64, 81, 188, 157, 36, 43, 146, 16, 62, 181, 199, 200, 104, 112, 91, 20, 217, 203, 61, 65, 80, 99, 165, 82, 57, 80, 59, 33, 209, 151, 8, 67, 165, 32, 148, 42, 173, 133, 5, 97, 106, 95, 169, 57, 132, 169, 148, 209, 105, 45, 232, 123, 58, 199, 2, 160, 118, 194, 42, 91, 196, 52, 33, 84, 41, 160, 144, 101, 73, 172, 29, 162, 57, 152, 41, 28, 250, 249, 163, 7, 94, 182, 32, 8, 246, 103, 170, 230, 225, 236, 114, 89, 130, 215, 79, 136, 2, 212, 194, 102, 39, 76, 180, 194, 197, 58, 84, 160, 230, 235, 124, 11, 66, 80, 132, 171, 101, 128, 51, 68, 203, 106, 11, 62, 244, 227, 68, 187, 165, 179, 60, 144, 184, 210, 188, 122, 7, 0, 209, 215, 11, 29, 249, 11, 240, 218, 208, 63, 13, 126, 44, 131, 59, 204, 143, 24, 184, 208, 133, 142, 254, 117, 95, 231, 82, 222, 117, 216, 55, 96, 137, 46, 23, 250, 215, 202, 253, 188, 198, 5, 129, 29, 113, 104, 107, 133, 134, 227, 191, 86, 149, 11, 158, 3, 216, 20, 65, 64, 3, 167, 5, 230, 128, 43, 176, 138, 71, 248, 71, 61, 134, 160, 195, 61, 28, 130, 32, 28, 200, 8, 55, 42, 36, 8, 135, 38, 88, 174, 196, 40, 15, 162, 61, 4, 240, 24, 135, 90, 16, 64, 57, 76, 129, 140, 60, 43, 64, 161, 225, 186, 46, 69, 104, 70, 181, 32, 163, 150, 93, 150, 37, 229, 234, 13, 135, 188, 101, 245, 2, 236, 134, 49, 210, 169, 108, 48, 102, 217, 155, 205, 215, 126, 167, 158, 248, 113, 131, 193, 96, 48, 24, 254, 202, 15, 149, 106, 155, 74, 19, 91, 41, 27, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 }
                        },
                        new
                        {
                            Id = 2,
                            Lives = (byte)24,
                            Name = "Eevee",
                            Speed = (byte)89,
                            Thumbnail = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 96, 0, 0, 0, 96, 4, 3, 0, 0, 0, 16, 182, 106, 11, 0, 0, 0, 48, 80, 76, 84, 69, 0, 0, 0, 16, 16, 16, 24, 74, 74, 49, 115, 115, 57, 148, 148, 82, 98, 41, 98, 213, 180, 115, 172, 49, 131, 238, 197, 164, 213, 65, 172, 0, 49, 189, 255, 115, 205, 205, 205, 238, 32, 57, 255, 106, 98, 255, 255, 255, 59, 16, 12, 198, 0, 0, 0, 1, 116, 82, 78, 83, 0, 64, 230, 216, 102, 0, 0, 1, 157, 73, 68, 65, 84, 88, 195, 237, 148, 191, 75, 195, 64, 20, 199, 211, 84, 113, 237, 73, 192, 193, 165, 45, 71, 219, 173, 208, 6, 113, 80, 36, 151, 71, 200, 230, 36, 165, 163, 24, 142, 174, 14, 33, 136, 155, 150, 112, 255, 128, 148, 252, 11, 1, 41, 184, 149, 108, 193, 209, 209, 189, 255, 65, 192, 186, 118, 240, 165, 184, 223, 171, 163, 220, 103, 254, 126, 242, 126, 112, 121, 150, 101, 48, 24, 12, 134, 255, 197, 225, 190, 249, 41, 163, 135, 143, 146, 248, 102, 154, 76, 90, 228, 252, 99, 81, 172, 178, 7, 186, 128, 249, 162, 72, 178, 152, 32, 216, 237, 186, 64, 81, 188, 157, 36, 43, 146, 16, 62, 181, 199, 200, 104, 112, 91, 20, 217, 203, 61, 65, 80, 99, 165, 82, 57, 80, 59, 33, 209, 151, 8, 67, 165, 32, 148, 42, 173, 133, 5, 97, 106, 95, 169, 57, 132, 169, 148, 209, 105, 45, 232, 123, 58, 199, 2, 160, 118, 194, 42, 91, 196, 52, 33, 84, 41, 160, 144, 101, 73, 172, 29, 162, 57, 152, 41, 28, 250, 249, 163, 7, 94, 182, 32, 8, 246, 103, 170, 230, 225, 236, 114, 89, 130, 215, 79, 136, 2, 212, 194, 102, 39, 76, 180, 194, 197, 58, 84, 160, 230, 235, 124, 11, 66, 80, 132, 171, 101, 128, 51, 68, 203, 106, 11, 62, 244, 227, 68, 187, 165, 179, 60, 144, 184, 210, 188, 122, 7, 0, 209, 215, 11, 29, 249, 11, 240, 218, 208, 63, 13, 126, 44, 131, 59, 204, 143, 24, 184, 208, 133, 142, 254, 117, 95, 231, 82, 222, 117, 216, 55, 96, 137, 46, 23, 250, 215, 202, 253, 188, 198, 5, 129, 29, 113, 104, 107, 133, 134, 227, 191, 86, 149, 11, 158, 3, 216, 20, 65, 64, 3, 167, 5, 230, 128, 43, 176, 138, 71, 248, 71, 61, 134, 160, 195, 61, 28, 130, 32, 28, 200, 8, 55, 42, 36, 8, 135, 38, 88, 174, 196, 40, 15, 162, 61, 4, 240, 24, 135, 90, 16, 64, 57, 76, 129, 140, 60, 43, 64, 161, 225, 186, 46, 69, 104, 70, 181, 32, 163, 150, 93, 150, 37, 229, 234, 13, 135, 188, 101, 245, 2, 236, 134, 49, 210, 169, 108, 48, 102, 217, 155, 205, 215, 126, 167, 158, 248, 113, 131, 193, 96, 48, 24, 254, 202, 15, 149, 106, 155, 74, 19, 91, 41, 27, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 }
                        },
                        new
                        {
                            Id = 3,
                            Lives = (byte)35,
                            Name = "Snorlax",
                            Speed = (byte)39,
                            Thumbnail = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 96, 0, 0, 0, 96, 4, 3, 0, 0, 0, 16, 182, 106, 11, 0, 0, 0, 48, 80, 76, 84, 69, 0, 0, 0, 16, 16, 16, 24, 74, 74, 49, 115, 115, 57, 148, 148, 82, 98, 41, 98, 213, 180, 115, 172, 49, 131, 238, 197, 164, 213, 65, 172, 0, 49, 189, 255, 115, 205, 205, 205, 238, 32, 57, 255, 106, 98, 255, 255, 255, 59, 16, 12, 198, 0, 0, 0, 1, 116, 82, 78, 83, 0, 64, 230, 216, 102, 0, 0, 1, 157, 73, 68, 65, 84, 88, 195, 237, 148, 191, 75, 195, 64, 20, 199, 211, 84, 113, 237, 73, 192, 193, 165, 45, 71, 219, 173, 208, 6, 113, 80, 36, 151, 71, 200, 230, 36, 165, 163, 24, 142, 174, 14, 33, 136, 155, 150, 112, 255, 128, 148, 252, 11, 1, 41, 184, 149, 108, 193, 209, 209, 189, 255, 65, 192, 186, 118, 240, 165, 184, 223, 171, 163, 220, 103, 254, 126, 242, 126, 112, 121, 150, 101, 48, 24, 12, 134, 255, 197, 225, 190, 249, 41, 163, 135, 143, 146, 248, 102, 154, 76, 90, 228, 252, 99, 81, 172, 178, 7, 186, 128, 249, 162, 72, 178, 152, 32, 216, 237, 186, 64, 81, 188, 157, 36, 43, 146, 16, 62, 181, 199, 200, 104, 112, 91, 20, 217, 203, 61, 65, 80, 99, 165, 82, 57, 80, 59, 33, 209, 151, 8, 67, 165, 32, 148, 42, 173, 133, 5, 97, 106, 95, 169, 57, 132, 169, 148, 209, 105, 45, 232, 123, 58, 199, 2, 160, 118, 194, 42, 91, 196, 52, 33, 84, 41, 160, 144, 101, 73, 172, 29, 162, 57, 152, 41, 28, 250, 249, 163, 7, 94, 182, 32, 8, 246, 103, 170, 230, 225, 236, 114, 89, 130, 215, 79, 136, 2, 212, 194, 102, 39, 76, 180, 194, 197, 58, 84, 160, 230, 235, 124, 11, 66, 80, 132, 171, 101, 128, 51, 68, 203, 106, 11, 62, 244, 227, 68, 187, 165, 179, 60, 144, 184, 210, 188, 122, 7, 0, 209, 215, 11, 29, 249, 11, 240, 218, 208, 63, 13, 126, 44, 131, 59, 204, 143, 24, 184, 208, 133, 142, 254, 117, 95, 231, 82, 222, 117, 216, 55, 96, 137, 46, 23, 250, 215, 202, 253, 188, 198, 5, 129, 29, 113, 104, 107, 133, 134, 227, 191, 86, 149, 11, 158, 3, 216, 20, 65, 64, 3, 167, 5, 230, 128, 43, 176, 138, 71, 248, 71, 61, 134, 160, 195, 61, 28, 130, 32, 28, 200, 8, 55, 42, 36, 8, 135, 38, 88, 174, 196, 40, 15, 162, 61, 4, 240, 24, 135, 90, 16, 64, 57, 76, 129, 140, 60, 43, 64, 161, 225, 186, 46, 69, 104, 70, 181, 32, 163, 150, 93, 150, 37, 229, 234, 13, 135, 188, 101, 245, 2, 236, 134, 49, 210, 169, 108, 48, 102, 217, 155, 205, 215, 126, 167, 158, 248, 113, 131, 193, 96, 48, 24, 254, 202, 15, 149, 106, 155, 74, 19, 91, 41, 27, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 }
                        });
                });

            modelBuilder.Entity("WC5Oef2.Models.Trainer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Trainers","dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WC5Oef2.Models.Trainer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WC5Oef2.Models.Trainer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WC5Oef2.Models.Trainer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WC5Oef2.Models.Trainer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WC5Oef2.Models.Pokemon", b =>
                {
                    b.HasOne("WC5Oef2.Models.Trainer", "Trainer")
                        .WithMany("Pokemons")
                        .HasForeignKey("TrainerId");
                });
#pragma warning restore 612, 618
        }
    }
}
